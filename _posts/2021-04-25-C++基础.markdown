---
layout:     post
title:      "C++面试问题整理"
subtitle:   "整理中…"
date:       "2021-04-25"
author:     "Johann"
# # header-img: "img/post-bg-js-version.jpg"
tags:
    - C++基础
---

### 1、C++中的三种继承方式：public、pravite、protected区别
- public:可以被类中的函数、子类的函数、友元函数、类的对象访问
- private:可以被类中的函数、友元函数访问，不能被**子类函数**、**类的对象访问**
- protected:可以被类中的函数、**子类的函数**、友元函数访问，不能被**类的对象访问**
### 2、操作符重载
操作符重载都是作用在操作符左边的操作数上。
#### 成员函数 this指针

```C++
inline complex&
_doapl(complex* ths, const complex& r)
{
    ths->re += r.re;
    ths->im += r.im;
    return *ths;
}

inline complex&
complex::operator += (const complex& r)//只用写操作符右边的变量
{
    return _doapl (this, r);
}

complex c2,c1;
c2 += c1//这里调用+=之后传入c2的this指针，
```

成员函数都有一个this指针，所以二元操作符重载就是把操作符函数作用在左边的对象的this指针

#### 非成员函数 无this指针，全局函数

```C++
inline complex
operator + (const complex& x, const complex& y)
{
    return complex (real(x) + real(y), imag(x) + imag(y));//real和imag是之前定义的取实部和虚部的函数，这里省略了
}
```
注意返回的不是`complex`而不是`complex&`，因为返回的是`local object`，是在函数里面创建的，函数执行完之后变量就消亡了，不能引用到了。

**local object** : typename(),`complex(4, 5)`没有名字，执行完这一行就消亡了，因此local object是不能return by reference的。
### 3、拷贝构造、拷贝赋值与析构
```C++
class string
{
public:
    string (const char* cstr = 0);//默认构造函数
    string (const string& str);//拷贝构造
    string& operator = (const string& str);//拷贝赋值
    ~string();//析构
    char* get_c_str() const{return m_data;}
private:
    char* m_data;
};

inline string::string(const char* cstr = 0)
{
    if(cstr){
        m_data = new char[strlen(cstr) + 1];
        strcpy(m_data, cstr);
    }
    else{//没有初值
        m_data = new char[1];
        *m_data = '\0';
    }
}
inline string::~string()
{
    delete[] m_data;
}
``` 
#### 浅拷贝与深拷贝
**浅拷贝**就是只拷贝指针，比如
```C++
string a("hello");
string b("world");
```
如果没有自己写拷贝赋值，那么a=b将会造成a,b两个指针都指向hello,会导致内存泄漏（b指向的world没有指针指向了），以及更改a的时候b会受影响。

**深拷贝**拷贝构造

```C++
inline string::string (const string& str)
{
    m_data = new char[strlen(str.m_data) + 1];
    strcpy(m_data, str.m_data);
}
//拷贝构造调用的场景
string c1("hello");
string c2(c1);
//或者
string c2 = c1;//与上一行等价
```
**拷贝复制**
```C++
inline string& string::operator=(const string& str)
{
    if(this == & str) return *this;//检测是否是自我赋值，自我赋值会导致出错
    delete[] m_data;
    m_data = new char[strlen(str.m_data) + 1];
    strcpy(m_data, str.m_data);
    return *this
}
//用于以下场景
string c1("hello");
string c2("world");
c2 = c1; 
```
### 4、右值引用与std::move()
C++里面只有左值能被引用，而对于有些情况比如vector的push_back()操作，STL是支持右值作为参数的**浅拷贝**的**移动构造函数**和**移动赋值重载函数**，并且左值作为参数的时候需要做深拷贝，**参数为左值意味着拷贝，参数为右值意味着移动**
```C++
class array{
public:
//右值作为参数的构造函数
    array(array&& temp_array){//右值引用是两个&
        data_ = temp_array.data_;
        size_ = temp_array.size_;
        //防止temp_array析构时delete data_,（因为做了浅拷贝）
        temp_array.data_ = nullptr;
    }
private:
    int* data_;
    int size_;
}
//使用方法
int main(){
    array a;
    array b(std::move(a));//此处调用
}
```
std::move(a)实际上做的是强制类型转换，把左值转换为右值
```C++
//vector中push_back支持右值作为参数
void push_back(const value_type& val);//左值
void push_back(value_type&& val);//右值
void emplace_back(args&& args);
//因此可以使用move
int main()
{
    string str1 = "hello";
    vector<string> vec;
    vec.push_back(str1);//左值，深拷贝
    vec.push_back(std::move(str1));//浅拷贝，右值str1会失效变成空
    vec.emplace_back(move(str1));//浅拷贝，右值str1会失效
}
```
### 5、复合委托和继承
#### 复合表示has a
```C++
template <class T>
class queue{
protected:
    deque<T> c;//底层容器,**复合**
public:
//queue使用deque作为底层容器，deque完全具备需要的功能，queue是一个配接器adapter
    bool empty() const {return c.empty();}
    size_type size() const{return c.size();}
    reference front() {return c.front();}
    reference back() {return c.back();}
    void push(const value_type& x) {c.push_back(x);}
    void pop() {c.pop_front();}
};
```
构造函数和析构函数的执行顺序：**构造由内而外**，container先调用component的**默认**构造函数，然后执行自己的构造函数。**析构由外而内**，container先执行自己的析构函数，然后调用component的析构函数。这个是由编译器完成的，所以调用的是component默认构造函数。如果不想调用默认的需要自己去写构造顺序。

### 委托 composition by reference
```C++
class stringrep;
class string{
public:
    string();
    string(const char* s);
    string(const string& s);
    string &operator=(const string& s);
    ~string()
private:
    stringrep* rep;//委托，用指针相连 pointer to implemention(handle and body)
};
#include "string.hpp"
namespace{
    class stringrep{
        friend class string;
            stringrep(const char* s);
            ~stringrep();
            int count;
            char* rep;
    };
}
string::string(){...}
```
### 继承 表示is a即是一种
```C++
struct list_node_base
{
    list_node_base* next;
    list_node_base* prev;
};
template<typename T>
struct list_node:public list_node_base
{
    T data;
};
//父类数据完全被继承
```
![avatar](/img/inheritance.png)
子类包含父类的成分，**构造由内而外，析构由外而内**。

**父类的析构函数必须是virtual**
### 虚函数与多态
### 虚函数 inheritance with virtual functions
继承当中：数据的继承要从内存考虑，函数的继承是继承了调用权。子类需要重新定义函数就要在父类里定义虚函数。
- 虚函数：希望子类重新定义，但是已经有默认定义
- 纯虚函数：子类一定要定义，有=0；
```C++
class shape{
public:
    virtual void draw() const = 0;//纯虚函数
    virtual void error(const std::string& msg);//虚函数
    int objectID() const;//非虚函数
};
```
一个打开文件的例子
```C++
class cdocument{
public:
    OnFileOpen();
    Read();//读内容应该是纯虚函数
};
cdocument::OnFileOpen(){
    ...
    void read()
    ...
}
class cmydoc:public cdocument{
public:
    virtual void read(){...}
}
main()
{
    cmydoc mydoc;
    ...
    mydoc.OnFileOpen();//其实是cdocument::OnFileOpen(&mydoc);
}
```
创建子类对象调用父类函数，所以执行顺序是
主函数执行mydoc.OnFileOpen()实际上是执行cdocument::OnFileOpen(&mydoc)，传入了mydoc对象的this指针，执行OnFileOpen里面的read()的时候实际上是执行this->read,也就是(*(this->vptr)[n])(this);所以执行到了虚函数
#### 例子：委托+继承 观察者模式
```C++
class subject{
    int m_value;
    vector<observer*> m_views;
public:
    void attach(observer* obs){
        m_views.push_back(obs);
    }
    void set_val(int value){
        m_value = value;
        notify();
    }
    void notify(){
        for(int i = 0; i < m_views.size(); ++i){
            m_views[i]->update(this, m_value);
        }
    }
};
class observer{
public:
    virtual void update(subject* sub, int value) = 0;
}
```
### 6、堆栈与内存管理
- 栈：存在于某作用于内的一块内存，比如调用函数，韩束本身会形成一个栈，存放接收的参数，以及返回地址
- 堆：操作系统提供的一块内存空间
例如
```C++
class complex {};
...
{
    complex c1(1,2);//调用构造函数，在栈上建立，离开作用域就被清理掉，又叫做auto object
    static complex c1(1,2);//静态对象，离开作用域也不会消失
    complex *p = new complex;//直到delete才回消失，delete调用析构函数。
    delete p;
}
```
内存泄漏就是没写delete，指针在离开作用域之后就消亡了，但是new出来的对象还没有消亡，因此再也没有机会delete p了。