---
layout:     post
title:      "操作系统"
subtitle:   "整理中…"
date:       "2021-04-27"
author:     "Johann"
# # header-img: "img/post-bg-js-version.jpg"
tags:
    - 操作系统
---
- [进程和线程](#进程和线程)
  - [进程](#进程)
    - [进程间通信](#进程间通信)
  - [线程](#线程)
  - [进程和线程的区别](#进程和线程的区别)
  - [进程在并发中的缺点](#进程在并发中的缺点)
- [内存管理](#内存管理)
  - [虚拟内存](#虚拟内存)
  - [分段](#分段)
  - [分页](#分页)
  - [段页式内存管理](#段页式内存管理)
  - [linux内存管理](#linux内存管理)
# 进程和线程
## 进程
### 进程间通信
每个进程的用户地址空间都是独立的，一般不能互相访问，但内核和空间是每个进程都共享的，所以进程间通信必须通过内核。进程间通信共有6种方式：管道、消息队列、共享内存、信号量、信号、Socket
- 管道
  
  ![avatar](/img/pipe.jpg)
  内核当中的一串缓存，分为匿名管道和命名管道，匿名管道只能在存在父子关系的进程间通信，比如`ps auxf | grep mysql`就是一个匿名管道，**通信是单向的，数据是无格式的数据流**，两个进程ps和grep都是shell的子进程。命名管道`FIFO`可以在任意两个进程间创建管道，但是效率很低，不适合频繁交换数据。
- 消息队列
  
  消息队列是内核中的消息链表，**生命周期随内核**，如果没有释消息放队列或者没关闭操作系统，消息队列一直存在，而匿名管道生命周期是随着进程创建而创建随着进程结束而销毁。特点是**通信不及时**，**大小有限制**，在系统中会有定义最大的队列长度，**同时存在用户态和内核态之间的数据拷贝的开销**，进程写数据到内核中的消息队列时会发生数据由用户态拷贝到内核态的过程，同理，另一进程读取的时候也会发生拷贝。
- 共享内存
  
  **为了避免消息队列的读取和写入的拷贝过程**，共享内存。拿出一块虚拟地址空间，映射到相同的物理内存中，两个进程共享这块内存，一个进程写入另一个进程马上就能看到。
- 信号量
  
  共享内存会有新的问题：**如果多个进程同时修改同一个共享内存，很有可能发生冲突**，为了防止多进程竞争共享资源，需要一个保护机制，使得任何时刻共享资源只能被一个进程访问，这个机制就是**信号量**，控制信号量的方式有两种原子操作：
  - 一个是 P 操作，这个操作会把信号量减去 -1，相减后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使用，进程可正常继续执行。
  - 另一个是 V 操作，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 > 0，则表明当前没有阻塞中的进程。
    
    **两个进程互斥，则初始化信号量为1，**
    ![/avatar](/img/ABhuchi.jpg)
      
      **两个进程同步，则初始化信号量为0**
    ![/avatar](/img/ABsyn.jpg)
    B一定要等A执行完了才能执行，如果B先执行，执行到P操作信号量 < 0, B阻塞等待。A执行完之后，执行了V操作，信号量变为0，阻塞在P操作的进程B被唤醒，继续执行，此时B可以读取A产生的数据了。
- 信号
  
  上面几种都是正常状态下的通信，**异常状态**下就要用信号来通知进程，信号是进程间通信机制中唯一的异步通信机制，可以在任何时候发送信号给一个进程，一旦有信号产生，就有三种进程对信号的处理方式：1、执行默认操作；2、捕捉信号(catch?)；3、忽略信号。
- Socket
  
  上述的通信方式都是在同一台主机上进行的，如果要跨网络在不同主机上通信就要用Socket了。
## 线程

## 进程和线程的区别
1、进程是资源分配的最小单位，线城是CPU调度的最小单位
2、创建或撤销进程，系统要位置分配或回收资源，操作系统开销远大于创建或撤销线程的开销
3、不同进程地址空间相互独立，统一进程内的线程共享同一地址空间。一个进程的线程在另一个进程内是不可见的。
4、进程间不会相互影响，但是一个线程挂掉可能会导致整个进程挂掉

## 进程在并发中的缺点
进程在同一时间只能干一件事，进程在执行过程中如果阻塞，整个进程会被挂起，即使进程中有不依赖等待的资源也不会执行，因此操作系统引入了更细粒度的线程，作为并发执行的单位，从而减少程序在并发执行中付出的时间和空间开销，提升并发性能

# 内存管理

## 虚拟内存
单片机中直接操作物理内存，这样无法同时运行两个程序，因为两个程序都对同一个地址直接操作会造成错误。而且多个进程使用的内存总和总是大于计算机的物理内存，所以使用虚拟内存来对物理内存进行抽象。
  - 进程使用的内存地址是**虚拟内存地址**
  - 硬件里面的是**物理内存地址**

操作系统引入虚拟内存，进程持有的虚拟地址会通过CPU芯片上的内存管理单元（MMU）的映射关系来转换变成物理地址，在通过物理地址访问内存。
![avatar](/img/virtualmem.png)
操作系统通过分段和分页来管理虚拟地址和物理地址之间的关系。
## 分段
将内存按照栈、堆、数据、代码进行分段，通过**段表**与物理地址进行映射
- 分段的问题：
  - 1、内存碎片，释放一个进程的内存之后会造成不连续的内存
  - 2、内存交换效率低，产生内存碎片之后需要用内存交换，把一个进程读到硬盘上再读到内存中，回来的时候放到紧邻的一块内存上，这样就有一个连续的内存块可以供别的进程使用，但是由于磁盘访问速度很慢，而每次内存交换都要把大段数据写到磁盘上，这就导致了效率低的问题。
![avatar](/img/memswap.jpg)

## 分页

## 段页式内存管理
## linux内存管理