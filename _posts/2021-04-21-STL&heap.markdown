---
layout:     post
title:      "STL优先级队列"
# subtitle:   "what happened ?"
date:       "2021-04-21"
author:     "Johann"
# # header-img: "img/post-bg-js-version.jpg"
tags:
    - STL
---

# STL中的优先级队列与堆排序
## priority_queue(class T ,class Sequence = Vector, Class Compare = less<typename sequence:value_type>)
### 用法
- 使用优先级队列需要`#include &lt;queue&gt;`(所以`priority_queue`也没有迭代器)
- STL的优先级队列可以实现对给定的数据按照优先级排序，并且插入和删除只需要$O(\lg n)$复杂度，排序优先级取决于**仿函数Compare**，仿函数Compare是一个类（或者结构体），比如可以定义一个类cmp，重载function call运算符`()`：
    ```C++
    class cmp{
    public:
        bool operator()(const pair<int,int> &a, const pair<int,int> &b){
            return a.second < b.second;
        }
    }
    ```  
    需要注意的是，这个operator()里面重载的运算是true的时候，证明a的优先级低于b的优先级，这也说明了为什么默认的Compare传入的是less却得到的是一个大顶堆（最大值在队列顶）
### 仿函数与函数指针(sort与priority_queue)
`sort()`的定义如下：
```C++
template<class RandomIt, class Compare>
constexpr void sort(RandomIt first, RandomIt last, Compare comp);
```
sort是一个**模板函数**，sort第三个参数是一个对象，所以应该传入的是一个函数指针或者是一个函数对象（由于仿函数中重载了function call运算符，所以可以加个()生成一个函数对象）比如对于上面定义的cmp可以以如下形式调用：
```C++
sort(nums.begin(), nums.end(), cmp());//注意这里是cmp()，相当于是一个cmp类的对象
```
当然也可以传入一个函数指针，如下：
```C++
static bool cmp(const int &a, const int &b){
    return a > b;
}
```
但是要注意的是，这个函数必须要加**static**,不然成员函数的第一参数默认是**this指针**，这样自定义的cmp其实是有三个参数，而sort的比较函数需要两个参数，传入之后会报错。  

priority_queue的定义：
```C++
template<class T, class Container = std::vector<T>, class Compare = std::less<type Container::value_type>> class priority_queue;
```
priority是一个**模板类**，类型参数表为T、Container和Compare,这三者都是**类**，所以priority_queue的第三个参数只能是一个仿函数（类）并且不能加()否则会变成函数对象。
- **成员函数**
  ```C++
  bool empty()
  size_type size()
  const_reference top() const {return c.front()} //c是底层vector c.front()返回的是元素而不是迭代器
  void push(const value_type& x)//放入尾端再重排heap这一步复杂度应该是O(lgn)
  void pop()//将队列顶端的元素删除
  ```
- 一个使用优先级队列的例子*leetcode-347*数组中的前k个高频元素
  ```C++
  class Solution{
      public:
      vector<int> topKFrequent(vector<int>& nums, int k){
        using E = std::pair<int,int>
        std::priority_queue<E, vector<E>, std::greater<E>> minHeap;//这里是一个小顶堆
        unordered_map<int, int> counter;
        for(auto e : nums){//遍历vector的方法，e是元素
            ++counter[e];//向hashmap里面添加元素并统计
        }
        for(auto& x : counter){
            //交换pair中的数字和频数的位置，因为pair依据第一个值来排序
            auto pair_ = make_pair(x.second,x.first);
            //如果堆满了，新进来的元素比堆顶（最小的）还小，就忽略
            if(minHeap.size() == k){
                if(pair_.first < minHeap.top()) continue;
                minHeap.pop();
                }
            minHeap.push(move(pair_));//move可以节省空间    
        }
        std::vector<int> res(minHeap.size())
        //遍历队列的一般形式
        for(!minHeap.empty()){
            res[--k] = minHeap.top().second;
            minHeap.pop();
        }
    }
  }
  ```
  - 这种题目的思路是，前K个最高频，那就维护一个k个元素的小顶堆，在堆满之后如果新来的元素是比堆顶还小，那就直接放弃，否则pop堆顶再把新元素入堆
  - 这里面遍历堆的方式，用hashmap统计的方法可以学习
  - 程序中向`vector<int>`插入pair_的使用用到了C++ 11的新特性**移动语义move()** 用move强制把pair_转化为具体的值，这样move之后原来的pair_就被“搬空”了，这样做可以避免临时变量copy的开销，这里有待继续研究**C++ 11新特性**
- 这种统计频率的题应该都是先用hashmap统计频率，然后用堆，注意建堆的时候要大小为K，而不是所有元素都放到堆里面，这样复杂度就是$O(nlgk)$
- *leetcode 451、692、215、973*都是这个思路




